using LeagueOfStats.Application.Extensions;
using LeagueOfStats.Domain.Matches.Enums;
using NUnit.Framework;

namespace LeagueOfStats.Application.Tests.Extensions;

[TestFixture]
public class CamilleQueueExtensionsTests
{
    [TestCase(Camille.Enums.Queue.CUSTOM, Queue.Custom)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_BLIND_PICK_DEPRECATED_2, Queue.SummonersRift5V5BlindPickDeprecated2)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_SOLO_DEPRECATED_4, Queue.SummonersRift5V5RankedSoloDeprecated4)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_PREMADE, Queue.SummonersRift5V5RankedPremade)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI, Queue.SummonersRiftCoOpVsAi)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_3V3_NORMAL, Queue.TwistedTreeline3V3Normal)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_3V3_RANKED_FLEX_DEPRECATED_9, Queue.TwistedTreeline3V3RankedFlexDeprecated9)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_DRAFT_PICK_DEPRECATED_14, Queue.SummonersRift5V5DraftPickDeprecated14)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_5V5_DOMINION_BLIND_PICK, Queue.CrystalScar5V5DominionBlindPick)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_5V5_DOMINION_DRAFT_PICK, Queue.CrystalScar5V5DominionDraftPick)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_DOMINION_CO_OP_VS_AI, Queue.CrystalScarDominionCoOpVsAi)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_INTRO_BOT_DEPRECATED_31, Queue.SummonersRiftCoOpVsAiIntroBotDeprecated31)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_BEGINNER_BOT_DEPRECATED_32, Queue.SummonersRiftCoOpVsAiBeginnerBotDeprecated32)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_INTERMEDIATE_BOT_DEPRECATED_33, Queue.SummonersRiftCoOpVsAiIntermediateBotDeprecated33)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_3V3_RANKED_TEAM, Queue.TwistedTreeline3V3RankedTeam)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_TEAM, Queue.SummonersRift5V5RankedTeam)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_CO_OP_VS_AI, Queue.TwistedTreelineCoOpVsAi)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_TEAM_BUILDER, Queue.SummonersRift5V5TeamBuilder)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_5V5_ARAM_DEPRECATED_65, Queue.HowlingAbyss5V5AramDeprecated65)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_ARAM_CO_OP_VS_AI, Queue.HowlingAbyssAramCoOpVsAi)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ONE_FOR_ALL_DEPRECATED_70, Queue.SummonersRiftOneForAllDeprecated70)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_1V1_SNOWDOWN_SHOWDOWN, Queue.HowlingAbyss1V1SnowdownShowdown)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_2V2_SNOWDOWN_SHOWDOWN, Queue.HowlingAbyss2V2SnowdownShowdown)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_6V6_HEXAKILL, Queue.SummonersRift6V6Hexakill)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ULTRA_RAPID_FIRE, Queue.SummonersRiftUltraRapidFire)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_ONE_FOR_ALL_MIRROR_MODE, Queue.HowlingAbyssOneForAllMirrorMode)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_ULTRA_RAPID_FIRE, Queue.SummonersRiftCoOpVsAiUltraRapidFire)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_DOOM_BOTS_RANK_1, Queue.SummonersRiftDoomBotsRank1)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_DOOM_BOTS_RANK_2, Queue.SummonersRiftDoomBotsRank2)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_DOOM_BOTS_RANK_5, Queue.SummonersRiftDoomBotsRank5)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_ASCENSION_DEPRECATED_96, Queue.CrystalScarAscensionDeprecated96)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_6V6_HEXAKILL, Queue.TwistedTreeline6V6Hexakill)]
    [TestCase(Camille.Enums.Queue.BUTCHERS_BRIDGE_5V5_ARAM, Queue.ButchersBridge5V5Aram)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_LEGEND_OF_THE_PORO_KING_DEPRECATED_300, Queue.HowlingAbyssLegendOfThePoroKingDeprecated300)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_NEMESIS, Queue.SummonersRiftNemesis)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_BLACK_MARKET_BRAWLERS, Queue.SummonersRiftBlackMarketBrawlers)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_NEXUS_SIEGE_DEPRECATED_315, Queue.SummonersRiftNexusSiegeDeprecated315)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_DEFINITELY_NOT_DOMINION, Queue.CrystalScarDefinitelyNotDominion)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ARURF_DEPRECATED_318, Queue.SummonersRiftArurfDeprecated318)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ALL_RANDOM, Queue.SummonersRiftAllRandom)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_DRAFT_PICK, Queue.SummonersRift5V5DraftPick)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_DYNAMIC, Queue.SummonersRift5V5RankedDynamic)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_SOLO, Queue.SummonersRift5V5RankedSolo)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_BLIND_PICK, Queue.SummonersRift5V5BlindPick)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_5V5_RANKED_FLEX, Queue.SummonersRift5V5RankedFlex)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_5V5_ARAM, Queue.HowlingAbyss5V5Aram)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_3V3_BLIND_PICK, Queue.TwistedTreeline3V3BlindPick)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_3V3_RANKED_FLEX_DEPRECATED_470, Queue.TwistedTreeline3V3RankedFlexDeprecated470)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_BLOOD_HUNT_ASSASSIN, Queue.SummonersRiftBloodHuntAssassin)]
    [TestCase(Camille.Enums.Queue.COSMIC_RUINS_DARK_STAR_SINGULARITY, Queue.CosmicRuinsDarkStarSingularity)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CLASH, Queue.SummonersRiftClash)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_ARAM_CLASH, Queue.HowlingAbyssAramClash)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_CO_OP_VS_AI_INTERMEDIATE_BOT, Queue.TwistedTreelineCoOpVsAiIntermediateBot)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_CO_OP_VS_AI_INTRO_BOT, Queue.TwistedTreelineCoOpVsAiIntroBot)]
    [TestCase(Camille.Enums.Queue.TWISTED_TREELINE_CO_OP_VS_AI_BEGINNER_BOT, Queue.TwistedTreelineCoOpVsAiBeginnerBot)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_INTRO_BOT, Queue.SummonersRiftCoOpVsAiIntroBot)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_BEGINNER_BOT, Queue.SummonersRiftCoOpVsAiBeginnerBot)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_CO_OP_VS_AI_INTERMEDIATE_BOT, Queue.SummonersRiftCoOpVsAiIntermediateBot)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ARURF, Queue.SummonersRiftArurf)]
    [TestCase(Camille.Enums.Queue.CRYSTAL_SCAR_ASCENSION, Queue.CrystalScarAscension)]
    [TestCase(Camille.Enums.Queue.HOWLING_ABYSS_LEGEND_OF_THE_PORO_KING, Queue.HowlingAbyssLegendOfThePoroKing)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_NEXUS_SIEGE, Queue.SummonersRiftNexusSiege)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_DOOM_BOTS_VOTING, Queue.SummonersRiftDoomBotsVoting)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_DOOM_BOTS_STANDARD, Queue.SummonersRiftDoomBotsStandard)]
    [TestCase(Camille.Enums.Queue.VALORAN_CITY_PARK_STAR_GUARDIAN_INVASION_NORMAL, Queue.ValoranCityParkStarGuardianInvasionNormal)]
    [TestCase(Camille.Enums.Queue.VALORAN_CITY_PARK_STAR_GUARDIAN_INVASION_ONSLAUGHT, Queue.ValoranCityParkStarGuardianInvasionOnslaught)]
    [TestCase(Camille.Enums.Queue.OVERCHARGE_PROJECT_HUNTERS, Queue.OverchargeProjectHunters)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_SNOW_ARURF, Queue.SummonersRiftSnowArurf)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ONE_FOR_ALL, Queue.SummonersRiftOneForAll)]
    [TestCase(Camille.Enums.Queue.CRASH_SITE_ODYSSEY_EXTRACTION_INTRO, Queue.CrashSiteOdysseyExtractionIntro)]
    [TestCase(Camille.Enums.Queue.CRASH_SITE_ODYSSEY_EXTRACTION_CADET, Queue.CrashSiteOdysseyExtractionCadet)]
    [TestCase(Camille.Enums.Queue.CRASH_SITE_ODYSSEY_EXTRACTION_CREWMEMBER, Queue.CrashSiteOdysseyExtractionCrewmember)]
    [TestCase(Camille.Enums.Queue.CRASH_SITE_ODYSSEY_EXTRACTION_CAPTAIN, Queue.CrashSiteOdysseyExtractionCaptain)]
    [TestCase(Camille.Enums.Queue.CRASH_SITE_ODYSSEY_EXTRACTION_ONSLAUGHT, Queue.CrashSiteOdysseyExtractionOnslaught)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_TEAMFIGHT_TACTICS, Queue.ConvergenceTeamfightTactics)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_TEAMFIGHT_TACTICS_1V0, Queue.ConvergenceTeamfightTactics1V0)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_TEAMFIGHT_TACTICS_2V0, Queue.ConvergenceTeamfightTactics2V0)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_RANKED_TEAMFIGHT_TACTICS, Queue.ConvergenceRankedTeamfightTactics)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_TEAMFIGHT_TACTICS_TUTORIAL, Queue.ConvergenceTeamfightTacticsTutorial)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_TEAMFIGHT_TACTICS_SIMLUATION, Queue.ConvergenceTeamfightTacticsSimluation)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_RANKED_TEAMFIGHT_TACTICS_HYPER_ROLL_, Queue.ConvergenceRankedTeamfightTacticsHyperRoll)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_RANKED_TEAMFIGHT_TACTICS_DOUBLE_UP_WORKSHOP__DEPRECATED_1150, Queue.ConvergenceRankedTeamfightTacticsDoubleUpWorkshopDeprecated1150)]
    [TestCase(Camille.Enums.Queue.CONVERGENCE_RANKED_TEAMFIGHT_TACTICS_DOUBLE_UP_WORKSHOP_, Queue.ConvergenceRankedTeamfightTacticsDoubleUpWorkshop)]
    [TestCase(Camille.Enums.Queue.NEXUS_BLITZ_DEPRECATED_1200, Queue.NexusBlitzDeprecated1200)]
    [TestCase(Camille.Enums.Queue.NEXUS_BLITZ, Queue.NexusBlitz)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_ULTIMATE_SPELLBOOK, Queue.SummonersRiftUltimateSpellbook)]
    [TestCase(Camille.Enums.Queue.ARENA_2V2V2V2_CHERRY_, Queue.Arena2V2V2V2Cherry)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_PICK_URF, Queue.SummonersRiftPickUrf)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_TUTORIAL_1, Queue.SummonersRiftTutorial1)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_TUTORIAL_2, Queue.SummonersRiftTutorial2)]
    [TestCase(Camille.Enums.Queue.SUMMONERS_RIFT_TUTORIAL_3, Queue.SummonersRiftTutorial3)]
    public void ToQueue_AllValid_ReturnsCorrectDomainQueue(Camille.Enums.Queue queue, Queue expectedQueue)
    {
        Assert.That(queue.ToQueue(), Is.EqualTo(expectedQueue));
    }
}